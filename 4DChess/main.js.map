{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["enum ChessPiece{\n    KING,QUEEN,BISHOP,KNIGHT,ROOK,PAWN,PAWN_PASSE\n}\nenum PieceColor{\n    WHITE,BLACK\n}\n/// screenshot an b.kuhstoss@web.de\nclass ChessField{\n    board: ChessBoard;\n    x : number;\n    y : number;\n    piece: ChessPiece | null;\n    color: PieceColor;\n\n    constructor(board: ChessBoard, x: number, y: number, piece: ChessPiece | null, color: PieceColor){\n        this.board = board;\n        this.x = x;\n        this.y = y;\n        this.piece = piece;\n        this.color = color;\n    }\n\n    public canMoveTo(color : PieceColor){\n        return (this.piece==null||color!=this.color)\n    }\n\n    public fieldsToMoveTo(){\n        let fieldsToMoveTo = new Set<ChessField>();\n        switch(this.piece){\n            case ChessPiece.KING:\n                this.royalMoves(fieldsToMoveTo, true)\n                break;\n            case ChessPiece.QUEEN:\n                this.royalMoves(fieldsToMoveTo, false)\n                break;\n            case ChessPiece.BISHOP:\n                this.bishopMoves(fieldsToMoveTo);\n                break;\n            case ChessPiece.ROOK:\n                this.rookMoves(fieldsToMoveTo);\n                break;\n            case ChessPiece.KNIGHT:\n                this.knightMoves(fieldsToMoveTo);\n            case ChessPiece.PAWN:\n            case ChessPiece.PAWN_PASSE:\n                this.pawnMoves(fieldsToMoveTo);\n            default:\n                break;\n        }\n        return fieldsToMoveTo;\n    }\n\n    private addField(board: ChessBoard, field: ChessField | null, set: Set<ChessField>){\n        if(field!=null&&field.canMoveTo(board.turn)){\n            set.add(field);\n        }\n    }\n\n    public pawnMoves(fieldsToMoveTo: Set<ChessField>){\n        if((this.board.turn==PieceColor.WHITE&&this.y>0)||(this.board.turn==PieceColor.BLACK&&this.y<7)){\n            let field = this.getField(this.board.time, this.board.multiverse, this.x, this.y+(this.board.turn==PieceColor.WHITE?-1:1));\n            if(field!=null&&field.piece==null){\n                this.addField(this.board, field, fieldsToMoveTo);\n                if(field!=null&&field.piece==null&&(this.board.turn==PieceColor.WHITE&&this.y==6||this.board.turn==PieceColor.BLACK&&this.y==1)){\n                    field = this.getField(this.board.time, this.board.multiverse, this.x, this.y+(this.board.turn==PieceColor.WHITE?-2:2));\n                    if(field!=null&&field.piece==null){\n                        this.addField(this.board, field, fieldsToMoveTo);\n                    }\n                }\n            }\n        }\n        let f2 = [-1,0,1]\n        f2.forEach(dx => {\n            f2.forEach(dt => {\n                if(Math.abs(dx)+Math.abs(dt)>0){\n                    if((this.board.time+dt*2)<0||((this.board.time+dt*2)>timeline.length-1)) return;\n                    timeline[this.board.time+dt*2].forEach(m => {\n                        if(m==null)return;\n                        let field = this.getField(this.board.time+dt*2, m.multiverse, this.x+dx, this.y+(this.board.turn==PieceColor.WHITE?-1:1));\n                        if(field!=null&&field.color!=this.board.turn&&field.piece!=null){\n                            fieldsToMoveTo.add(field);\n                        }\n                    });\n                }\n            });\n        });\n        if((this.board.turn==PieceColor.WHITE&&this.y==3)||(this.board.turn==PieceColor.BLACK&&this.y==4)){\n            f2.forEach(dx => {\n                f2.forEach(dt => {\n                    if((this.board.time+dt*2)<0||((this.board.time+dt*2)>timeline.length-1)) return;\n                        timeline[this.board.time+dt*2].forEach(m => {\n                            if(m==null)return;\n                            let field = this.getField(this.board.time+dt*2, m.multiverse, this.x+dx, this.y);\n                            console.log(field);\n                            if(field!=null&&field.color!=this.board.turn&&field.piece==ChessPiece.PAWN_PASSE){\n                                console.log(\"passe\");\n                                field = this.getField(this.board.time+dt*2, m.multiverse, this.x+dx, this.y+(this.board.turn==PieceColor.WHITE?-1:1));\n                                if(field!=null&&field.piece==null)\n                                    fieldsToMoveTo.add(field);\n                            }\n                        });\n                }); \n            });\n        }\n    }\n\n    public knightMoves(fieldsToMoveTo: Set<ChessField>){\n        let f = [-1,0,1]\n        f.forEach(dx => {\n            f.forEach(dy => {\n                f.forEach(dt => {\n                    if(dt==0&&Math.abs(dx)+Math.abs(dy)==2){\n                        let field = this.getField(this.board.time, this.board.multiverse, this.x+dx*2, this.y+dy);\n                        this.addField(this.board, field, fieldsToMoveTo);\n                        field = this.getField(this.board.time, this.board.multiverse, this.x+dx, this.y+dy*2);\n                        this.addField(this.board, field, fieldsToMoveTo);\n                    }\n                    else if(dy==0&&Math.abs(dt)+Math.abs(dx)==2){\n                        let field = this.getField(this.board.time+dt*2, this.board.multiverse, this.x+dx*2, this.y);\n                        this.addField(this.board, field, fieldsToMoveTo);\n                        field = this.getField(this.board.time+dt*4, this.board.multiverse, this.x+dx, this.y);\n                        this.addField(this.board, field, fieldsToMoveTo);\n                    }\n                    else if(dx==0&&Math.abs(dt)+Math.abs(dy)==2){\n                        let field = this.getField(this.board.time+dt*2, this.board.multiverse, this.x, this.y+dy*2);\n                        this.addField(this.board, field, fieldsToMoveTo);\n                        field = this.getField(this.board.time+dt*4, this.board.multiverse, this.x, this.y+dy);\n                        this.addField(this.board, field, fieldsToMoveTo);\n                    }\n                    else if(Math.abs(dx)+Math.abs(dy)+Math.abs(dt)==1){\n                        if((this.board.time+dt*2)<0||((this.board.time+dt*2)>timeline.length-1)) return;\n                        timeline[this.board.time+dt*2].forEach(m => {\n                            if(m==null)return;\n                            if(m.multiverse==this.board.multiverse){\n                                return;\n                            }\n                            let field = this.getField(this.board.time+dt*2, m.multiverse, this.x+dx, this.y+dy);\n                            this.addField(this.board, field, fieldsToMoveTo);\n                        });\n                        if((this.board.time+dt*4)<0||((this.board.time+dt*4)>timeline.length-1)) return;\n                        timeline[this.board.time+dt*4].forEach(m => {\n                            if(m==null)return;\n                            if(m.multiverse==this.board.multiverse)return;\n                            let field = this.getField(this.board.time+dt*4, m.multiverse, this.x+dx*2, this.y+dy*2);\n                            this.addField(this.board, field, fieldsToMoveTo);\n                        });\n                    }\n                });\n            });\n        });\n    }\n\n    public royalMoves(fieldsToMoveTo : Set<ChessField>, short: boolean){\n        let f = [-1,0,1]\n        f.forEach(dx => {\n            f.forEach(dy => {\n                f.forEach(dt => {\n                    if(Math.abs(dx)+Math.abs(dy)+Math.abs(dt)==0)return;\n                    if((this.board.time+dt*2)<0||((this.board.time+dt*2)>timeline.length-1)) return;\n                    timeline[this.board.time+dt*2].forEach(m => {\n                        if(m==null)return;\n                        let dt2 = dt;\n                        let dx2 = dx;\n                        let dy2 = dy;\n                        let field = this.getField(this.board.time+dt2*2, m.multiverse, this.x+dx2, this.y+dy2);\n                        while(field!=null&&field.canMoveTo(this.board.turn)){\n                            fieldsToMoveTo.add(field);\n                            dt2 += dt;\n                            dx2 += dx;\n                            dy2 += dy;\n                            field = this.getField(this.board.time+dt2*2, m.multiverse, this.x+dx2, this.y+dy2);\n                            if(field!=null&&field.piece!=null){\n                                if(field.canMoveTo(this.board.turn))fieldsToMoveTo.add(field);\n                                break;\n                            }\n                            if(short)break;\n                        }\n                    });\n                });\n            });\n        });\n        for(let m = 0;m<timeline[this.board.time].length;m++){\n            if(m==this.board.multiverse)continue;\n            let field = this.getField(this.board.time, m, this.x, this.y);\n            if(field!=null&&field.canMoveTo(this.board.turn)){\n                fieldsToMoveTo.add(field);\n            }\n        }\n    }\n    public rookMoves(fieldsToMoveTo : Set<ChessField>){\n        let f2 = [-1,0,1]\n        f2.forEach(dx => {\n            f2.forEach(dy => {\n                f2.forEach(dt => {\n                    if(Math.abs(dx)+Math.abs(dy)+Math.abs(dt)==1){\n                        let dt2 = dt;\n                        let dx2 = dx;\n                        let dy2 = dy;\n                        let field = this.getField(this.board.time+dt2*2, this.board.multiverse, this.x+dx2, this.y+dy2);\n                        while(field!=null&&field.canMoveTo(this.board.turn)){\n                            fieldsToMoveTo.add(field);\n                            dt2 += dt;\n                            dx2 += dx;\n                            dy2 += dy;\n                            field = this.getField(this.board.time+dt2*2, this.board.multiverse, this.x+dx2, this.y+dy2);\n                            if(field!=null&&field.piece!=null){\n                                if(field.canMoveTo(this.board.turn))fieldsToMoveTo.add(field);\n                                break;\n                            }\n                        }\n                    }\n                });\n            });\n        });\n        for(let m = 0;m<timeline[this.board.time].length;m++){\n            if(m==this.board.multiverse)continue;\n            let field = this.getField(this.board.time, m, this.x, this.y);\n            if(field!=null&&field.canMoveTo(this.board.turn)){\n                fieldsToMoveTo.add(field);\n            }\n        }\n    }\n    public bishopMoves(fieldsToMoveTo : Set<ChessField>){\n        let f2 = [-1,0,1]\n        f2.forEach(dx => {\n            f2.forEach(dy => {\n                f2.forEach(dt => {\n                    if(Math.abs(dx)+Math.abs(dy)+Math.abs(dt)==2){\n                        let dt2 = dt;\n                        let dx2 = dx;\n                        let dy2 = dy;\n                        let field = this.getField(this.board.time+dt2*2, this.board.multiverse, this.x+dx2, this.y+dy2);\n                        while(field!=null&&field.canMoveTo(this.board.turn)){\n                            fieldsToMoveTo.add(field);\n                            dt2 += dt;\n                            dx2 += dx;\n                            dy2 += dy;\n                            field = this.getField(this.board.time+dt2*2, this.board.multiverse, this.x+dx2, this.y+dy2);\n                            if(field!=null&&field.piece!=null){\n                                if(field.canMoveTo(this.board.turn))fieldsToMoveTo.add(field);\n                                break;\n                            }\n                        }\n                    }\n                    else if(Math.abs(dx)+Math.abs(dy)+Math.abs(dt)==1&&this.board.time+dt<timeline.length&&this.board.time+dt>=0){\n                        for(let m = 0;m<timeline[this.board.time+dt].length;m++){\n                            if(m==this.board.multiverse)continue;\n                            let field = this.getField(this.board.time+dt*2, m, this.x+dx, this.y+dy);\n                            if(field!=null&&field.canMoveTo(this.board.turn)){\n                                fieldsToMoveTo.add(field);\n                            }\n                        }\n                    }\n                });\n            });\n        });\n    }\n\n    public click(){\n        if(selectedField==this){\n            selectedField = null;\n            fieldsToMoveTo = new Set<ChessField>();\n        }      \n        else if(this.piece!=null&&this.color==this.board.turn&&this.board.nextBoards.size==0){\n            selectedField = this;\n            fieldsToMoveTo = this.fieldsToMoveTo();\n        }\n        else if(fieldsToMoveTo.has(this)&&selectedField!=null){\n            this.makeMove(selectedField as ChessField, this);\n            selectedField = null;\n            fieldsToMoveTo = new Set<ChessField>();\n        }\n        else{\n            selectedField = null;\n            fieldsToMoveTo = new Set<ChessField>();\n        }\n        drawBoards();\n    }\n\n    public makeMove(from : ChessField, to : ChessField){\n        let board = addBoard(to.board);\n        if(from.board!=to.board){\n            addBoard(from.board).fields[from.x][from.y].piece = null;\n        }\n        else{\n            board.fields[from.x][from.y].piece = null;\n        }\n        if(from.piece==ChessPiece.PAWN&&Math.abs(to.y-from.y)==2){\n            board.fields[to.x][to.y].piece = ChessPiece.PAWN_PASSE;\n            console.log(\"test\");\n        }\n        let field = this.getField(to.board.time, to.board.multiverse, to.x, to.y+(from.board.turn==PieceColor.WHITE?1:-1));\n        if(from.piece==ChessPiece.PAWN&&field!=null&&field.color!=from.color&&field.piece==ChessPiece.PAWN_PASSE){\n            field.board.fields[field.x][field.y].piece = null;\n        }\n        else{\n            board.fields[to.x][to.y].piece = from.piece;\n        }\n        board.fields[to.x][to.y].color = from.color;\n    }\n\n    public getField(time: number, multiverse: number, x: number, y: number){\n        if((time)<0||((time)>timeline.length-1)) return null;\n        if((x)<0||(x>7))return null;\n        if((y)<0||(y>7))return null;\n        if(multiverse>timeline[time].length-1||multiverse<0)return null;\n        return timeline[time][multiverse]==null?null:timeline[time][multiverse]!.fields[x][y];\n    }\n}\nclass ChessBoard{\n\n    previousBoard: ChessBoard | null;\n    nextBoards: Set<ChessBoard>;\n    canvas: HTMLCanvasElement;\n    context: CanvasRenderingContext2D;\n    fields: ChessField[][];\n    time: number;\n    turn: PieceColor;\n    multiverse: number;\n\n    constructor(canvas: HTMLCanvasElement, previousBoard: ChessBoard | null, multiverse: number){\n        this.previousBoard = previousBoard;\n        this.turn = PieceColor.WHITE;\n        if(previousBoard!=null){previousBoard.nextBoards.add(this);this.turn = previousBoard.turn==PieceColor.WHITE?PieceColor.BLACK:PieceColor.WHITE;}\n        this.nextBoards = new Set<ChessBoard>();\n        this.fields = [];\n\n        for(let i = 0;i<8;i++){\n            let f = [];\n            for(let j = 0;j<8;j++){\n                f.push(new ChessField(this, i, j, null, PieceColor.WHITE));\n            }\n            this.fields.push(f);\n        }\n        if(previousBoard!=null){\n            for(let i = 0;i<8;i++){\n                for(let j = 0;j<8;j++){\n                    this.fields[i][j].piece = previousBoard.fields[i][j].piece;\n                    if(this.fields[i][j].piece==ChessPiece.PAWN_PASSE)this.fields[i][j].piece = ChessPiece.PAWN;\n                    this.fields[i][j].color = previousBoard.fields[i][j].color;\n                }\n            }\n        }\n        this.canvas = canvas;\n        this.canvas.width = CHESSBOARD_SIZE;\n        this.canvas.height = CHESSBOARD_SIZE;\n        this.canvas.addEventListener(\"click\", e => {\n            let x = Math.floor(8*e.offsetX/this.canvas.width);\n            let y = Math.floor(8*e.offsetY/this.canvas.height);\n            this.fields[x][y].click();\n        });\n        this.context = this.canvas.getContext(\"2d\")!;\n        this.time = previousBoard==null?0:previousBoard.time+1;\n        this.multiverse = multiverse;\n    }\n\n    public drawBoard() {\n        let w = this.canvas.width/8;\n        let h = this.canvas.height/8;\n        for(let i = 0;i<8;i++){\n            for(let j = 0;j<8;j++){\n                let b = (i%2^j%2);\n                if(selectedField==this.fields[i][j])\n                    this.context.fillStyle = \"hsl(30,70%,40%)\";\n                else if(fieldsToMoveTo.has(this.fields[i][j]))\n                    this.context.fillStyle = \"hsl(50,80%,50%)\";\n                else if(b==0)\n                    this.context.fillStyle = \"#94b840\";\n                else \n                    this.context.fillStyle = \"#2e3b10\";\n                this.context.fillRect(i*w,j*h,w,h); \n                let field = this.fields[i][j];\n                if(field.piece != null){\n                    this.context.drawImage(pieceImages[(field.piece==ChessPiece.PAWN_PASSE?ChessPiece.PAWN:field.piece)+\"_\"+field.color], i*w,j*h,w,h);\n                }               \n            }\n        }\n        if(this.nextBoards.size>0){\n            this.context.fillStyle = this.turn==PieceColor.WHITE?\"rgba(220,220,220,40%)\":\"rgba(50,50,50,40%)\";\n            this.context.fillRect(0,0,this.canvas.width, this.canvas.height); \n        }\n    }\n}\nconst CHESSBOARD_SIZE = 300;\n\nfunction defaultStartBoardFields(board : ChessBoard){\n    var order = [ChessPiece.ROOK, ChessPiece.KNIGHT, ChessPiece.BISHOP, ChessPiece.QUEEN, ChessPiece.KING,ChessPiece.BISHOP,ChessPiece.KNIGHT,ChessPiece.ROOK];\n\n    for(let i = 0;i<8;i++){\n        for(let j = 0;j<8;j++){\n            board.fields[i][j].piece = null;\n            board.fields[i][j].color = j>3?PieceColor.WHITE:PieceColor.BLACK;\n        }\n        board.fields[i][0].piece = order[i];\n        board.fields[i][1].piece = ChessPiece.PAWN;\n        board.fields[i][6].piece = ChessPiece.PAWN;\n        board.fields[i][7].piece = order[i];\n    }\n}\n\nvar pieceImages : Record<string, HTMLImageElement> = {};\nObject.keys(ChessPiece).forEach(p => {\n    Object.keys(PieceColor).forEach(c => {\n        var piece = parseInt(p);\n        var color = parseInt(c);\n        if(!isNaN(piece)&& !isNaN(color)){\n            pieceImages[piece+\"_\"+color] = new Image();\n            pieceImages[piece+\"_\"+color].src = \"pieces/\"+color+\"_\"+piece+\".svg\";\n        }\n    });\n});\n\nvar timelineTable : HTMLTableElement;\nvar timeline = [] as (ChessBoard | null)[][];\n\nvar selectedField = null as ChessField | null;\nvar fieldsToMoveTo = new Set<ChessField>();\n\nfunction drawBoards(){\n    timeline.forEach(time => {\n        time.forEach(mul => {\n            if(mul!=null)mul.drawBoard();\n        });\n    });\n}\n\nfunction addBoard(previousBoard: ChessBoard){\n    let div : HTMLDivElement;\n    let canvas = document.createElement(\"canvas\");\n    canvas.classList.add(\"chessboard\");\n    let multiverse = 0;\n    if(previousBoard.nextBoards.size==0){\n        multiverse = previousBoard.multiverse;\n    }\n    else{\n        multiverse = previousBoard.multiverse+1;\n        for (const d of timeline) {\n            d.splice(multiverse, 0, null);\n            for(let f = multiverse;f<d.length;f++){\n                if(d[f]!=null){\n                    d[f]!.multiverse = f;\n                }\n            }\n        }\n    }\n    let board = new ChessBoard(canvas, previousBoard, multiverse);\n    if(timeline.length<board.time+1){\n        let arr = timeline.push([])-1;\n        for(let f = 0;f<timeline[0].length;f++){\n            timeline[arr].push(null);\n        }\n    }\n    timeline[board.time][board.multiverse] = board;\n\n    let body = timelineTable.createTBody();\n    timelineTable.replaceChildren(body);\n    for(let m = 0;m<timeline[0].length;m++){\n        let row = body.insertRow();\n        for(let t = 0;t<timeline.length;t++){\n            let cell = row.insertCell();\n            if(timeline[t][m]!=null)cell.appendChild(timeline[t][m]!.canvas);\n        }\n    }\n    return board;\n}\n\nfunction main() {\n    timelineTable = document.getElementById(\"timeline\") as HTMLTableElement;\n    let c = document.getElementById(\"first-chessboard\") as HTMLCanvasElement;\n    let f = [] as ChessBoard[];\n    f.push(new ChessBoard(c, null, 0));\n    timeline.push(f);\n    defaultStartBoardFields(f[0]);\n    window.onload = e => {drawBoards();};\n}\n\nmain();"],
  "mappings": "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",
  "names": []
}
